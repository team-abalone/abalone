package com.teamabalone.abalone.Client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
/*
import org.json.JSONObject;
import org.json.JSONException;
*/

//TODO: Make Client Singleton Class (after testing), make Client be global, correctly configure org.json-dependency
public class Client {
    String userId;          //Either taken from 'settings' or generated by api - still unsure
    BufferedReader br;      //Reads socket's inputstream
    PrintWriter writer;     //Writes to socket's outputstream
    Socket socket;          //Connects to api


    /**
     * Constructor, Builds socket and instanciates neccasary classes for further actions
     * @param userId - May be of use, if we do not decide to automatically generate the user's id
     */
    public Client(String userId) /*throws JSONException*/{
        this.userId = userId;
        try{
            //Basic Input/Output elements, as well as socket connection
            this.socket=new Socket("abaloneapi.germanywestcentral.cloudapp.azure.com", 5001);
            this.br= new BufferedReader(new InputStreamReader(this.socket.getInputStream(),"UTF-8"));
            this.writer = new PrintWriter(this.socket.getOutputStream());
        }
        //TODO: Deal with different Exceptions accordingly
        catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void writeRead(String write) throws IOException/*,JSONException*/ {
        //PrintWriter writes to socket.Outputstream
        this.writer.println(write);
        this.writer.flush();

        //Basic output
        String line;
        while((line = this.br.readLine()) != null){
            System.out.println(line.toString());
        }
        //TODO: return JSONObject later on
    }

    /**
     *
     * @param commandCode - Used by api to respond correspondingly
     * @param props - further information regarding our request
     * @throws JSONException
     * @throws IOException
     */
    /* TODO: Enable when dependency issue is cleared
    public void sendRequest(int commandCode, JSONObject props) throws JSONException, IOException {
        //Depending on command code, the client should execute the corresponding request to the server

        //Build JSON object to send to server
        JSONObject write = new JSONObject();
        write.put("commandCode", commandCode);
        write.put("props", props);
        write.put("userId", this.userId);
        //Give as parameter to writeRead()
        writeRead(write.toString());
    }*/

    /**
     * Closes socket / connection
     * For exiting a room
     * @throws IOException
     */
    public void closeSocket() throws IOException {
        this.socket.close();
    }

}